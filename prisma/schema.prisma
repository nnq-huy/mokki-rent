// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[]
  role            Role @default(USER)

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                  String @id @default(cuid())
  title               String
  description         String
  imageSrc            String
  createdAt           DateTime @default(now())
  category            String
  roomCount           Int
  bathroomCount       Int
  hasSauna            Boolean
  guestCount          Int
  locationValue       String
  userId              String
  price               Int
  status              ListingStatus @default(available)
  rating              Float @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id                  String @id @default(cuid())
  userId              String
  listingId           String
  hostId              String
  hostName            String
  hostPhoto           String?
  startDate           DateTime
  endDate             DateTime
  totalPrice          Int
  status              ReservationStatus @default(unconfirmed)
  createdAt           DateTime @default(now())
  rating              Float @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id                  String @id @default(cuid())
  reservationId       String
  senderId            String
  senderName          String
  senderPhoto         String?
  receiverId          String
  content             String
  createdAt           DateTime @default(now())
  isPicture           Boolean

  reservation Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum ReservationStatus {
  unconfirmed
  confirmed
  cancelled
  done
}

enum ListingStatus {
  available
  unavailable
}